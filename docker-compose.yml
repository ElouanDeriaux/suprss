services:
  # Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: suprss_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-suprss_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-suprss_pass}
      POSTGRES_DB: ${POSTGRES_DB:-suprss_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-suprss_user} -d ${POSTGRES_DB:-suprss_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - suprss_network

  # Serveur API FastAPI
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: suprss_backend
    restart: always
    # env_file: - .env  # Désactivé - l'application gère le chargement automatiquement
    environment:
      - DATABASE_URL=postgresql://suprss_user:suprss_pass@db:5432/suprss_db
      - CORS_ORIGINS=http://localhost:3000,http://frontend:80
      - SUPRSS_MASTER_PASSWORD=${SUPRSS_MASTER_PASSWORD:-}
      # Les autres variables sont chargées automatiquement par env_loader depuis .env/.env.encrypted
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./suprss.db:/app/suprss.db  # Fallback SQLite si PostgreSQL échoue
    networks:
      - suprss_network

  # Client Web (Nginx servant les fichiers statiques)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: suprss_frontend
    restart: always
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - suprss_network
    environment:
      - API_URL=http://localhost:8000

# Volumes persistants
volumes:
  postgres_data:
    driver: local

# Réseau pour la communication inter-services
networks:
  suprss_network:
    driver: bridge
