#!/usr/bin/env python3
"""
üõ°Ô∏è SUPRSS Security Helper
Utilitaire pour am√©liorer la s√©curit√© des cr√©dentiels et de l'application.

Usage:
    python security_helper.py encrypt-env        # Chiffre le fichier .env
    python security_helper.py decrypt-env        # D√©chiffre le fichier .env
    python security_helper.py generate-keys      # G√©n√®re de nouvelles cl√©s s√©curis√©es
    python security_helper.py check-security     # Audit de s√©curit√© basique
    python security_helper.py setup-security     # Configuration s√©curit√© compl√®te
    python security_helper.py production-mode    # Configure pour la production
"""

import os
import sys
import json
import base64
import hashlib
import secrets
from datetime import datetime
from pathlib import Path
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import getpass


class SUPRSSSecurityHelper:
    """Gestionnaire de s√©curit√© pour SUPRSS"""
    
    def __init__(self):
        self.env_file = Path(".env")
        self.env_encrypted_file = Path(".env.encrypted")
        self.security_config_file = Path(".suprss_security.json")
        
    def derive_key(self, password: str, salt: bytes) -> bytes:
        """D√©rive une cl√© de chiffrement √† partir d'un mot de passe"""
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        return base64.urlsafe_b64encode(kdf.derive(password.encode()))
    
    def encrypt_env_file(self):
        """Chiffre le fichier .env avec un mot de passe ma√Ætre"""
        if not self.env_file.exists():
            print("‚ùå Fichier .env introuvable. Cr√©ez-le d'abord.")
            return False
            
        print("üîê Chiffrement du fichier .env")
        password = getpass.getpass("Entrez un mot de passe ma√Ætre pour chiffrer .env: ")
        confirm_password = getpass.getpass("Confirmez le mot de passe: ")
        
        if password != confirm_password:
            print("‚ùå Les mots de passe ne correspondent pas.")
            return False
            
        # G√©n√©ration du sel
        salt = os.urandom(16)
        key = self.derive_key(password, salt)
        
        # Chiffrement
        fernet = Fernet(key)
        env_content = self.env_file.read_text()
        encrypted_content = fernet.encrypt(env_content.encode())
        
        # Sauvegarde du fichier chiffr√©
        encrypted_data = {
            "salt": base64.b64encode(salt).decode(),
            "encrypted_content": base64.b64encode(encrypted_content).decode(),
            "created_at": datetime.now().isoformat()
        }
        
        with open(self.env_encrypted_file, 'w') as f:
            json.dump(encrypted_data, f, indent=2)
            
        print(f"‚úÖ Fichier .env chiffr√© sauvegard√© : {self.env_encrypted_file}")
        print("‚ö†Ô∏è  IMPORTANT : Gardez votre mot de passe ma√Ætre en s√©curit√© !")
        
        # Propose de supprimer le .env original
        print("\nüìã Options post-chiffrement :")
        print("1. Garder .env original (recommand√© pour le d√©veloppement)")
        print("2. Supprimer .env original (plus s√©curis√© pour la production)")
        print("3. L'application peut maintenant utiliser automatiquement .env.encrypted")
        
        response = input("Supprimer le fichier .env original ? (y/N): ")
        if response.lower() == 'y':
            self.env_file.unlink()
            print("üóëÔ∏è  Fichier .env original supprim√©.")
            print("üí° L'application d√©chiffrera automatiquement .env.encrypted au d√©marrage")
        else:
            print("üìÅ Fichier .env original conserv√©")
            
        return True
    
    def decrypt_env_file(self):
        """D√©chiffre le fichier .env.encrypted"""
        if not self.env_encrypted_file.exists():
            print("‚ùå Fichier .env.encrypted introuvable.")
            return False
            
        print("üîì D√©chiffrement du fichier .env")
        password = getpass.getpass("Entrez le mot de passe ma√Ætre: ")
        
        # Lecture du fichier chiffr√©
        with open(self.env_encrypted_file, 'r') as f:
            encrypted_data = json.load(f)
            
        salt = base64.b64decode(encrypted_data["salt"])
        encrypted_content = base64.b64decode(encrypted_data["encrypted_content"])
        
        # D√©chiffrement
        key = self.derive_key(password, salt)
        fernet = Fernet(key)
        
        try:
            decrypted_content = fernet.decrypt(encrypted_content)
            env_content = decrypted_content.decode()
            
            # Sauvegarde du fichier d√©chiffr√©
            with open(self.env_file, 'w') as f:
                f.write(env_content)
                
            print(f"‚úÖ Fichier .env restaur√© depuis {self.env_encrypted_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur de d√©chiffrement : Mot de passe incorrect ?")
            return False
    
    def generate_secure_keys(self):
        """G√©n√®re de nouvelles cl√©s s√©curis√©es"""
        print("üîë G√©n√©ration de nouvelles cl√©s s√©curis√©es")
        
        keys = {
            "SECRET_KEY": secrets.token_hex(32),
            "JWT_REFRESH_SECRET": secrets.token_hex(32),
            "ENCRYPTION_KEY": secrets.token_hex(32),
            "CSRF_SECRET": secrets.token_hex(16)
        }
        
        print("\nüìã Nouvelles cl√©s g√©n√©r√©es :")
        print("=" * 50)
        for key, value in keys.items():
            print(f"{key}={value}")
        print("=" * 50)
        
        # Propose de mettre √† jour .env
        if self.env_file.exists():
            response = input("\nMettre √† jour automatiquement .env ? (y/N): ")
            if response.lower() == 'y':
                self.update_env_file(keys)
                print("‚úÖ Fichier .env mis √† jour avec les nouvelles cl√©s.")
                
        return keys
    
    def update_env_file(self, new_keys: dict):
        """Met √† jour le fichier .env avec de nouvelles cl√©s"""
        if not self.env_file.exists():
            print("‚ùå Fichier .env introuvable.")
            return False
            
        # Lecture du contenu actuel
        lines = self.env_file.read_text().split('\n')
        updated_lines = []
        
        for line in lines:
            if '=' in line and not line.strip().startswith('#'):
                key = line.split('=')[0].strip()
                if key in new_keys:
                    updated_lines.append(f"{key}={new_keys[key]}")
                else:
                    updated_lines.append(line)
            else:
                updated_lines.append(line)
        
        # Ajout des nouvelles cl√©s si elles n'existent pas
        existing_keys = [line.split('=')[0].strip() for line in lines if '=' in line and not line.strip().startswith('#')]
        for key, value in new_keys.items():
            if key not in existing_keys:
                updated_lines.append(f"{key}={value}")
        
        # Sauvegarde
        self.env_file.write_text('\n'.join(updated_lines))
        return True
    
    def security_audit(self):
        """Effectue un audit de s√©curit√© basique"""
        print("üîç Audit de s√©curit√© SUPRSS")
        print("=" * 40)
        
        issues = []
        recommendations = []
        
        # V√©rification du fichier .env
        if self.env_file.exists():
            env_content = self.env_file.read_text()
            
            # V√©rification SECRET_KEY
            if "SECRET_KEY=your-secret-key-here" in env_content:
                issues.append("‚ùå SECRET_KEY utilise la valeur par d√©faut")
                recommendations.append("Ex√©cutez: python security_helper.py generate-keys")
            elif "SECRET_KEY=" in env_content:
                secret_key = [line for line in env_content.split('\n') if line.startswith('SECRET_KEY=')]
                if secret_key and len(secret_key[0].split('=')[1]) < 32:
                    issues.append("‚ö†Ô∏è  SECRET_KEY trop courte (< 32 caract√®res)")
            
            # V√©rification des mots de passe par d√©faut
            default_passwords = [
                "your-secret-key-here",
                "your-app-password", 
                "suprss_pass",
                "password123"
            ]
            for default in default_passwords:
                if default in env_content:
                    issues.append(f"‚ùå Mot de passe par d√©faut d√©tect√©: {default}")
            
            # V√©rification des permissions du fichier
            permissions = oct(self.env_file.stat().st_mode)[-3:]
            if permissions != "600":
                issues.append(f"‚ö†Ô∏è  Permissions .env trop ouvertes: {permissions} (recommand√©: 600)")
                recommendations.append("Ex√©cutez: chmod 600 .env")
        
        else:
            issues.append("‚ùå Fichier .env introuvable")
        
        # V√©rification .gitignore
        gitignore = Path(".gitignore")
        if gitignore.exists():
            gitignore_content = gitignore.read_text()
            if ".env" not in gitignore_content:
                issues.append("‚ùå .env n'est pas dans .gitignore")
                recommendations.append("Ajoutez '.env' dans .gitignore")
        else:
            issues.append("‚ö†Ô∏è  Fichier .gitignore introuvable")
        
        # Affichage des r√©sultats
        if not issues:
            print("‚úÖ Aucun probl√®me de s√©curit√© d√©tect√© !")
        else:
            print("\nüö® Probl√®mes d√©tect√©s :")
            for issue in issues:
                print(f"  {issue}")
                
            if recommendations:
                print("\nüí° Recommandations :")
                for rec in recommendations:
                    print(f"  {rec}")
        
        return len(issues) == 0
    
    def setup_security(self):
        """Configuration compl√®te de la s√©curit√©"""
        print("üõ°Ô∏è  Configuration s√©curis√©e de SUPRSS")
        print("=" * 40)
        
        # 1. G√©n√©ration de nouvelles cl√©s
        print("\n1. G√©n√©ration de cl√©s s√©curis√©es...")
        keys = self.generate_secure_keys()
        
        # 2. Configuration des permissions
        print("\n2. Configuration des permissions...")
        if self.env_file.exists():
            os.chmod(self.env_file, 0o600)
            print("‚úÖ Permissions .env d√©finies √† 600")
        
        # 3. V√©rification .gitignore
        print("\n3. V√©rification .gitignore...")
        gitignore = Path(".gitignore")
        if gitignore.exists():
            gitignore_content = gitignore.read_text()
            if ".env" not in gitignore_content:
                gitignore.write_text(gitignore_content + "\n.env\n.env.encrypted\n.suprss_security.json\n")
                print("‚úÖ .env ajout√© √† .gitignore")
            else:
                print("‚úÖ .gitignore d√©j√† configur√©")
        
        # 4. Proposition de chiffrement
        print("\n4. Chiffrement du fichier .env...")
        response = input("Voulez-vous chiffrer le fichier .env ? (y/N): ")
        if response.lower() == 'y':
            self.encrypt_env_file()
        
        # 5. Cr√©ation du fichier de configuration s√©curis√©e
        security_config = {
            "security_version": "1.0",
            "last_audit": datetime.now().isoformat(),
            "security_features": {
                "encrypted_env": self.env_encrypted_file.exists(),
                "secure_permissions": True,
                "gitignore_configured": True
            }
        }
        
        with open(self.security_config_file, 'w') as f:
            json.dump(security_config, f, indent=2)
        
        print("\n‚úÖ Configuration s√©curis√©e termin√©e !")
        print("üìù Fichier de configuration cr√©√© : .suprss_security.json")
    
    def setup_production_mode(self):
        """Configure l'application pour un environnement de production s√©curis√©"""
        print("üè≠ Configuration mode PRODUCTION")
        print("=" * 40)
        
        if not self.env_encrypted_file.exists():
            print("‚ùå Aucun fichier .env.encrypted trouv√©.")
            print("üí° Chiffrez d'abord avec: python security_helper.py encrypt-env")
            return False
        
        # Supprime le .env original si il existe
        if self.env_file.exists():
            response = input("Supprimer .env original pour la production ? (y/N): ")
            if response.lower() == 'y':
                self.env_file.unlink()
                print("üóëÔ∏è  Fichier .env supprim√© pour la s√©curit√©")
        
        # Instructions pour la production
        print("\nüìã Instructions pour le mode production :")
        print("1. D√©finissez la variable d'environnement SUPRSS_MASTER_PASSWORD")
        print("2. Ou l'application demandera le mot de passe au d√©marrage")
        print("3. Le fichier .env sera d√©chiffr√© automatiquement en m√©moire")
        print("\nüí° Exemple Docker:")
        print("   docker run -e SUPRSS_MASTER_PASSWORD='votre-mot-de-passe' ...")
        
        return True


def main():
    """Point d'entr√©e principal"""
    helper = SUPRSSSecurityHelper()
    
    if len(sys.argv) < 2:
        print(__doc__)
        return
    
    command = sys.argv[1]
    
    commands = {
        'encrypt-env': helper.encrypt_env_file,
        'decrypt-env': helper.decrypt_env_file,
        'generate-keys': helper.generate_secure_keys,
        'check-security': helper.security_audit,
        'setup-security': helper.setup_security,
        'production-mode': helper.setup_production_mode
    }
    
    if command in commands:
        try:
            commands[command]()
        except KeyboardInterrupt:
            print("\n\n‚ùå Op√©ration annul√©e.")
        except Exception as e:
            print(f"\n‚ùå Erreur : {e}")
    else:
        print(f"‚ùå Commande inconnue : {command}")
        print(__doc__)


if __name__ == "__main__":
    main()